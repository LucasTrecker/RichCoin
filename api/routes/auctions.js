var express = require('express');
var router = express.Router();
const mysql = require('mysql');
const app = require('../app');
const bodyParser = require("body-parser");
const axios = require("axios");
const RichCoin = require("../abi/RichCoin");
const Dex = require("../abi/DEX");
const ethjs = require("ethereumjs-util");
const Web3 = require('web3');
const web3 = new Web3(new Web3.providers.HttpProvider('http://localhost:7545'));
const fs = require("fs-extra");
const FormData = require('form-data');
const Blob = require("node-blob");

const validByteCodeRichCoin = "0x608060405234801561001057600080fd5b506004361061021c5760003560e01c8063715018a611610125578063a4fd6f56116100ad578063e6796aaa1161007c578063e6796aaa146104c9578063e985e9c5146104dc578063f2fde38b146104ef578063fe67a54b14610502578063ff2e28881461050a57600080fd5b8063a4fd6f561461047e578063b88d4fde14610490578063c65015cb146104a3578063c87b56dd146104b657600080fd5b80638620612b116100f45780638620612b146104095780638da5cb5b1461043257806395d89b41146104435780639a5dd7351461044b578063a22cb4651461046b57600080fd5b8063715018a6146103d557806382bf863d146103dd5780638404dac7146103f0578063854cf3cf146103f857600080fd5b806323b872dd116101a857806342842e0e1161017757806342842e0e146103765780634d5623fb14610389578063633cd29d1461039c5780636352211e146103af57806370a08231146103c257600080fd5b806323b872dd1461032e5780632820345a14610341578063313ce567146103545780633790d53d1461036357600080fd5b8063095ea7b3116101ef578063095ea7b31461029b5780630c4e1760146102b0578063150b7a02146102c35780631d126fcb146102ef5780631ec5ee261461031b57600080fd5b8063010a38f51461022157806301ffc9a71461023857806306fdde031461025b578063081812fc14610270575b600080fd5b6009545b6040519081526020015b60405180910390f35b61024b610246366004611d28565b61051d565b604051901515815260200161022f565b61026361058a565b60405161022f9190611e43565b61028361027e366004611d62565b61061c565b6040516001600160a01b03909116815260200161022f565b6102ae6102a9366004611cfc565b6106b6565b005b6102256102be366004611b2a565b61085c565b6102d66102d1366004611be5565b6108d0565b6040516001600160e01b0319909116815260200161022f565b61024b6102fd366004611b2a565b6001600160a01b03166000908152600b602052604090205460ff1690565b6102ae610329366004611c98565b6108e1565b6102ae61033c366004611ba4565b610919565b61022561034f366004611b2a565b6109fe565b6040516000815260200161022f565b610263610371366004611d62565b610a5c565b6102ae610384366004611ba4565b610b6c565b610263610397366004611d62565b610b87565b6102836103aa366004611d62565b610be7565b6102836103bd366004611d62565b610c35565b6102256103d0366004611b2a565b610cac565b6102ae610d33565b6102836103eb366004611d62565b610d99565b601054610225565b600a546001600160a01b0316610283565b610225610417366004611b2a565b6001600160a01b03166000908152600f602052604090205490565b6000546001600160a01b0316610283565b610263610e09565b6010546000908152600c60205260409020546001600160a01b0316610283565b6102ae610479366004611c65565b610e18565b600a54600160a01b900460ff1661024b565b6102ae61049e366004611be5565b610f06565b6102636104b1366004611b2a565b610fed565b6102636104c4366004611d62565b61104d565b6102ae6104d7366004611cfc565b6111d7565b61024b6104ea366004611b6b565b611245565b6102ae6104fd366004611b2a565b611273565b6102ae61133e565b610225610518366004611b2a565b61137d565b60006001600160e01b031982166380ac58cd60e01b148061054e57506001600160e01b03198216635b5e139f60e01b145b8061056957506301ffc9a760e01b6001600160e01b03198316145b8061058457506001600160e01b03198216630a85bd0160e11b145b92915050565b60606003805461059990612196565b80601f01602080910402602001604051908101604052809291908181526020018280546105c590612196565b80156106125780601f106105e757610100808354040283529160200191610612565b820191906000526020600020905b8154815290600101906020018083116105f557829003601f168201915b5050505050905090565b6000818152600560205260408120546001600160a01b031661069a5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600760205260409020546001600160a01b031690565b600a54600160a01b900460ff166106df5760405162461bcd60e51b815260040161069190611edf565b6040516331a9108f60e11b8152600481018290526000903090636352211e9060240160206040518083038186803b15801561071957600080fd5b505afa15801561072d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107519190611b4e565b9050806001600160a01b0316836001600160a01b031614156107bf5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610691565b336001600160a01b03821614806107db57506107db8133611245565b61084d5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610691565b61085783836113da565b505050565b6001600160a01b0381166000908152600b6020526040812054829060ff166108965760405162461bcd60e51b815260040161069190611e56565b6001600160a01b0383166000908152600d60205260409020546010546108bd906001612050565b6108c79190612153565b91505b50919050565b630a85bd0160e11b5b949350505050565b600a546001600160a01b0316331461090b5760405162461bcd60e51b815260040161069190611fc8565b61091582826114b0565b5050565b600a5482908290600160a01b900460ff166109c657600a546001600160a01b031633146109585760405162461bcd60e51b815260040161069190611f6b565b6001600160a01b0382166000908152600b602052604090205460ff16156109c15760405162461bcd60e51b815260206004820181905260248201527f43616c6c65722068617320616c7265616479206265656e20616e206f776e65726044820152606401610691565b6109ec565b6109d0338261153c565b6109ec5760405162461bcd60e51b815260040161069190611fff565b6109f7858585611672565b5050505050565b6001600160a01b0381166000908152600b6020526040812054829060ff16610a385760405162461bcd60e51b815260040161069190611e56565b6001600160a01b0383166000908152600d60205260409020546108c79060026120ab565b606081600081118015610a7157506010548111155b610a8d5760405162461bcd60e51b815260040161069190611f34565b600e6000600c6000866010546001610aa59190612050565b610aaf9190612153565b815260208082019290925260409081016000908120546001600160a01b0316845291830193909352910190208054610ae690612196565b80601f0160208091040260200160405190810160405280929190818152602001828054610b1290612196565b8015610b5f5780601f10610b3457610100808354040283529160200191610b5f565b820191906000526020600020905b815481529060010190602001808311610b4257829003601f168201915b5050505050915050919050565b61085783838360405180602001604052806000815250610f06565b606081600081118015610b9c57506010548111155b610bb85760405162461bcd60e51b815260040161069190611f34565b6000838152600c60209081526040808320546001600160a01b03168352600e90915290208054610ae690612196565b600081600081118015610bfc57506010548111155b610c185760405162461bcd60e51b815260040161069190611f34565b50506000908152600c60205260409020546001600160a01b031690565b6000818152600560205260408120546001600160a01b0316806105845760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610691565b60006001600160a01b038216610d175760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610691565b506001600160a01b031660009081526006602052604090205490565b6000546001600160a01b03163314610d8d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610691565b610d976000611879565b565b600081600081118015610dae57506010548111155b610dca5760405162461bcd60e51b815260040161069190611f34565b600c6000846010546001610dde9190612050565b610de89190612153565b81526020810191909152604001600020546001600160a01b03169392505050565b60606004805461059990612196565b600a54600160a01b900460ff16610e415760405162461bcd60e51b815260040161069190611edf565b6001600160a01b038216331415610e9a5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610691565b3360008181526008602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b600a5483908390600160a01b900460ff16610fb357600a546001600160a01b03163314610f455760405162461bcd60e51b815260040161069190611f6b565b6001600160a01b0382166000908152600b602052604090205460ff1615610fae5760405162461bcd60e51b815260206004820181905260248201527f43616c6c65722068617320616c7265616479206265656e20616e206f776e65726044820152606401610691565b610fd9565b610fbd338261153c565b610fd95760405162461bcd60e51b815260040161069190611fff565b610fe5868686866118c9565b505050505050565b6001600160a01b0381166000908152600b6020526040902054606090829060ff1661102a5760405162461bcd60e51b815260040161069190611e56565b6001600160a01b0383166000908152600e602052604090208054610ae690612196565b6000818152600560205260409020546060906001600160a01b03166110ce5760405162461bcd60e51b815260206004820152603160248201527f45524337323155524953746f726167653a2055524920717565727920666f72206044820152703737b732bc34b9ba32b73a103a37b5b2b760791b6064820152608401610691565b600082815260016020526040812080546110e790612196565b80601f016020809104026020016040519081016040528092919081815260200182805461111390612196565b80156111605780601f1061113557610100808354040283529160200191611160565b820191906000526020600020905b81548152906001019060200180831161114357829003601f168201915b505050505090506000611171611902565b90508051600014156111a6578160405160200161118e9190611dd7565b60405160208183030381529060405292505050919050565b8151156111c057808460405160200161118e929190611da7565b505060408051602081019091526000815292915050565b600a546001600160a01b031633146112015760405162461bcd60e51b815260040161069190611fc8565b6001600160a01b0382166000908152600f6020526040902054611225908290612050565b6001600160a01b039092166000908152600f602052604090209190915550565b6001600160a01b03918216600090815260086020908152604080832093909416825291909152205460ff1690565b6000546001600160a01b031633146112cd5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610691565b6001600160a01b0381166113325760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610691565b61133b81611879565b50565b600a546001600160a01b031633146113685760405162461bcd60e51b815260040161069190611fc8565b600a805460ff60a01b1916600160a01b179055565b6001600160a01b0381166000908152600b6020526040812054829060ff166113b75760405162461bcd60e51b815260040161069190611e56565b50506001600160a01b03166000908152600d602052604090205490565b3b151590565b6000818152600760205260409081902080546001600160a01b0319166001600160a01b03851690811790915590516331a9108f60e11b8152600481018390528291903090636352211e9060240160206040518083038186803b15801561143f57600080fd5b505afa158015611453573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114779190611b4e565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6001600160a01b0382166000908152600b60205260408120805460ff1916600117905560108054916114e1836121cb565b9091555050601080546000908152600c6020908152604080832080546001600160a01b0319166001600160a01b0388169081179091559354938352600d825280832093909355600e8152919020825161085792840190611a1b565b6000818152600560205260408120546001600160a01b03166115b55760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610691565b6040516331a9108f60e11b8152600481018390526000903090636352211e9060240160206040518083038186803b1580156115ef57600080fd5b505afa158015611603573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116279190611b4e565b9050806001600160a01b0316846001600160a01b031614806116625750836001600160a01b03166116578461061c565b6001600160a01b0316145b806108d957506108d98185611245565b6040516331a9108f60e11b8152600481018290526001600160a01b038416903090636352211e9060240160206040518083038186803b1580156116b457600080fd5b505afa1580156116c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ec9190611b4e565b6001600160a01b0316146117545760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b6064820152608401610691565b6001600160a01b0382166117b65760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610691565b6117c16000826113da565b6001600160a01b03831660009081526006602052604081208054600192906117ea908490612153565b90915550506001600160a01b0382166000908152600660205260408120805460019290611818908490612050565b909155505060008181526005602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6118d4848484611672565b6118e084848484611911565b6118fc5760405162461bcd60e51b815260040161069190611e8d565b50505050565b60606002805461059990612196565b60006001600160a01b0384163b15611a1357604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290611955903390899088908890600401611e06565b602060405180830381600087803b15801561196f57600080fd5b505af192505050801561199f575060408051601f3d908101601f1916820190925261199c91810190611d45565b60015b6119f9573d8080156119cd576040519150601f19603f3d011682016040523d82523d6000602084013e6119d2565b606091505b5080516119f15760405162461bcd60e51b815260040161069190611e8d565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506108d9565b5060016108d9565b828054611a2790612196565b90600052602060002090601f016020900481019282611a495760008555611a8f565b82601f10611a6257805160ff1916838001178555611a8f565b82800160010185558215611a8f579182015b82811115611a8f578251825591602001919060010190611a74565b50611a9b929150611a9f565b5090565b5b80821115611a9b5760008155600101611aa0565b600067ffffffffffffffff80841115611acf57611acf6121fc565b604051601f8501601f19908116603f01168101908282118183101715611af757611af76121fc565b81604052809350858152868686011115611b1057600080fd5b858560208301376000602087830101525050509392505050565b600060208284031215611b3c57600080fd5b8135611b4781612212565b9392505050565b600060208284031215611b6057600080fd5b8151611b4781612212565b60008060408385031215611b7e57600080fd5b8235611b8981612212565b91506020830135611b9981612212565b809150509250929050565b600080600060608486031215611bb957600080fd5b8335611bc481612212565b92506020840135611bd481612212565b929592945050506040919091013590565b60008060008060808587031215611bfb57600080fd5b8435611c0681612212565b93506020850135611c1681612212565b925060408501359150606085013567ffffffffffffffff811115611c3957600080fd5b8501601f81018713611c4a57600080fd5b611c5987823560208401611ab4565b91505092959194509250565b60008060408385031215611c7857600080fd5b8235611c8381612212565b915060208301358015158114611b9957600080fd5b60008060408385031215611cab57600080fd5b8235611cb681612212565b9150602083013567ffffffffffffffff811115611cd257600080fd5b8301601f81018513611ce357600080fd5b611cf285823560208401611ab4565b9150509250929050565b60008060408385031215611d0f57600080fd5b8235611d1a81612212565b946020939093013593505050565b600060208284031215611d3a57600080fd5b8135611b4781612227565b600060208284031215611d5757600080fd5b8151611b4781612227565b600060208284031215611d7457600080fd5b5035919050565b60008151808452611d9381602086016020860161216a565b601f01601f19169290920160200192915050565b60008351611db981846020880161216a565b919091019182525064173539b7b760d91b6020820152602501919050565b66697066733a2f2f60c81b815260008251611df981600785016020870161216a565b9190910160070192915050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090611e3990830184611d7b565b9695505050505050565b602081526000611b476020830184611d7b565b6020808252601b908201527f476976656e206164647265737320776173206e6f206f776e6572210000000000604082015260600190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60208082526035908201527f43616e277420706572666f726d207468697320616374696f6e207768696c6520604082015274185d58dd1a5bdb881a185cc81b9bdd08195b991959605a1b606082015260800190565b60208082526019908201527f476976656e20706c616365206973206e6f742076616c69642100000000000000604082015260600190565b60208082526038908201527f547261736e66657265722068617320746f20626520746865204445582077686960408201527f6c652061756374696f6e20686173206e6f7420656e6465640000000000000000606082015260800190565b60208082526019908201527f43616e206f6e6c792062652063616c6c65642062792044455800000000000000604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b60008219821115612063576120636121e6565b500190565b600181815b808511156120a3578160001904821115612089576120896121e6565b8085161561209657918102915b93841c939080029061206d565b509250929050565b6000611b4783836000826120c157506001610584565b816120ce57506000610584565b81600181146120e457600281146120ee5761210a565b6001915050610584565b60ff8411156120ff576120ff6121e6565b50506001821b610584565b5060208310610133831016604e8410600b841016171561212d575081810a610584565b6121378383612068565b806000190482111561214b5761214b6121e6565b029392505050565b600082821015612165576121656121e6565b500390565b60005b8381101561218557818101518382015260200161216d565b838111156118fc5750506000910152565b600181811c908216806121aa57607f821691505b602082108114156108ca57634e487b7160e01b600052602260045260246000fd5b60006000198214156121df576121df6121e6565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461133b57600080fd5b6001600160e01b03198116811461133b57600080fdfea2646970667358221220acf8824afc683499d45114aad58e87e11b2955d5a36b6217c3f12ee200cb2ec864736f6c63430008060033";

const validByteCodeDex = "";

const db = mysql.createPool(
    {
        host: 'db5009657844.hosting-data.io',
        user: 'dbu2814476',
        password: 'SpOnGeBoB12345!',
        database: 'dbs8186685',
        multipleStatements: true
    }
)

router.use(bodyParser.urlencoded({ extended: true }));

var signatures = {
    R0lGODdh: "data:image/gif;charset=utf-8;base64,",
    R0lGODlh: "data:image/gif;charset=utf-8;base64,",
    iVBORw0KGgo: "data:image/png;charset=utf-8;base64,",
    "/9j/2w": "data:image/jpg;charset=utf-8;base64,",
    "/9j/4A": "data:image/jpg;charset=utf-8;base64,",
    "/9j/7g": "data:image/jpg;charset=utf-8;base64,",
    "/9j/4Q": "data:image/jpg;charset=utf-8;base64,",
    "/9j/": "data:image/jpg;charset=utf-8;base64,"
};

function detectMimeType(b64) {
    for (var s in signatures) {
        if (b64.indexOf(s) === 0) {
            return signatures[s];
        }
    }
}

router.get('/', function (req, res) {
    var query = req.query.query;
    var queryParams = [query, query, query, query, query, query, query];
    var limitClause;
    if (query) {
        query = query.replace(/%/g, "");
    }
    var limit = req.query.limit;
    if (!limit) {
        limitClause = "";
    } else {
        limitClause = "LIMIT ?";
        limit = parseInt(limit);
        queryParams.push(limit);
    }
    const sqlSelect = "SELECT *, TO_BASE64(users.userImage) AS userImage, TO_BASE64(auctions.nftImage) AS nftImage FROM auctions INNER JOIN users ON auctions.creatorAddress = users.userAddress WHERE nftAddress LIKE CONCAT('%', ?, '%') OR creatorAddress LIKE CONCAT('%', ?, '%') OR auctionName LIKE CONCAT('%', ?, '%') OR auctionDescription LIKE CONCAT('%', ?, '%')  OR userName LIKE CONCAT('%', ?, '%') ORDER BY CASE WHEN auctionName LIKE CONCAT('%', ?, '%') THEN 1 WHEN auctionDescription LIKE CONCAT('%', ?, '%') THEN 2 ELSE 3 END " + limitClause + ";";

    db.query(sqlSelect, queryParams, (err, result) => {
        if (!err) {
            if (result) {
                for (var ob in result) {
                    if (result[ob].userImage) {
                        result[ob].userImage = detectMimeType(result[ob].userImage) + result[ob].userImage;
                    }
                    result[ob].nftImage = detectMimeType(result[ob].nftImage) + result[ob].nftImage;
                }
                res.send(result);
            }
        } else {
            res.send(err);
        }
    });
});



router.get('/closableAuctions', function (req, res, next) {

    var now = Date.now() / 1000;
    const sqlSelect = "SELECT *, TO_BASE64(users.userImage) AS userImage, TO_BASE64(auctions.nftImage) AS nftImage FROM auctions INNER JOIN users ON auctions.creatorAddress = users.userAddress WHERE ? >= auctionStart AND ? >= auctionDeadline AND auctionClosed = 0;";

    db.query(sqlSelect, [now, now], (err, result) => {
        if (!err) {
            console.log(result.length);
            if (result) {
                for (var ob in result) {
                    if (result[ob].userImage) {
                        result[ob].userImage = detectMimeType(result[ob].userImage) + result[ob].userImage;
                    }
                    result[ob].nftImage = detectMimeType(result[ob].nftImage) + result[ob].nftImage;
                }
                res.send(result);
            }
        } else {
            res.send(err);
        }
    });
    //res.send(userAddress);
});

router.get('/runningAuctions', function (req, res, next) {

    var now = Date.now() / 1000;
    const sqlSelect = "SELECT *, TO_BASE64(users.userImage) AS userImage, TO_BASE64(auctions.nftImage) AS nftImage FROM auctions INNER JOIN users ON auctions.creatorAddress = users.userAddress WHERE ? >= auctionStart AND ? <= auctionDeadline;";

    db.query(sqlSelect, [now, now], (err, result) => {
        if (!err) {
            if (result) {
                console.log(result.length);
                for (var ob in result) {
                    if (result[ob].userImage) {
                        result[ob].userImage = detectMimeType(result[ob].userImage) + result[ob].userImage;
                    }
                    result[ob].nftImage = detectMimeType(result[ob].nftImage) + result[ob].nftImage;
                }
                res.send(result);
            }
        } else {
            res.send(err);
        }
    });
    //res.send(userAddress);
});

router.get('/startingAuctions', function (req, res, next) {

    var now = Date.now() / 1000;
    const sqlSelect = "SELECT *, TO_BASE64(users.userImage) AS userImage, TO_BASE64(auctions.nftImage) AS nftImage FROM auctions INNER JOIN users ON auctions.creatorAddress = users.userAddress WHERE ? <= auctionStart;";

    db.query(sqlSelect, [now], (err, result) => {
        if (!err) {
            if (result) {
                console.log(result.length);
                for (var ob in result) {
                    if (result[ob].userImage) {
                        result[ob].userImage = detectMimeType(result[ob].userImage) + result[ob].userImage;
                    }
                    result[ob].nftImage = detectMimeType(result[ob].nftImage) + result[ob].nftImage;
                }
                res.send(result);
            }
        } else {
            res.send(err);
        }
    });
    //res.send(userAddress);
});

router.get('/closedAuctions', function (req, res, next) {

    var now = Date.now() / 1000;
    const sqlSelect = "SELECT *, TO_BASE64(users.userImage) AS userImage, TO_BASE64(auctions.nftImage) AS nftImage FROM auctions INNER JOIN users ON auctions.creatorAddress = users.userAddress WHERE auctionClosed = 1;";

    db.query(sqlSelect, [], (err, result) => {
        if (!err) {
            if (result) {
                console.log(result.length);
                for (var ob in result) {
                    if (result[ob].userImage) {
                        result[ob].userImage = detectMimeType(result[ob].userImage) + result[ob].userImage;
                    }
                    result[ob].nftImage = detectMimeType(result[ob].nftImage) + result[ob].nftImage;
                }
                res.send(result);
            }
        } else {
            res.send(err);
        }
    });
    //res.send(userAddress);
});

router.get('/:nftAddress', function (req, res, next) {
    const nftAddress = req.params.nftAddress;
    const sqlSelect = "SELECT *, TO_BASE64(users.userImage) AS userImage, TO_BASE64(auctions.nftImage) AS nftImage FROM auctions INNER JOIN users ON auctions.creatorAddress = users.userAddress WHERE nftAddress = ?;";

    db.query(sqlSelect, [nftAddress], (err, result) => {
        if (!err) {
            if (result) {
                if (result[0]) {
                    if (result[0].userImage) {
                        result[0].userImage = detectMimeType(result[0].userImage) + result[0].userImage;
                    }
                    result[0].nftImage = detectMimeType(result[0].nftImage) + result[0].nftImage;
                }
                res.send(result);
            }
        } else {
            res.send(err);
        }
    });
    //res.send(userAddress);
});

//Bild noch speichern?




router.put('/:txHash', function (req, res, next) {
    execute();
    async function execute() {
        var txHash = req.params.txHash;
        var receipt;
        await setReceipt();
        var dexAddress = receipt.to;
        var newOwnerAddress = ethjs.toChecksumAddress(receipt.from);


        var byteCode = await web3.eth.getCode(dexAddress);
        var exists = byteCode != "0x";
        console.log(byteCode);
        if (exists) {
            var dexContract = new web3.eth.Contract(Dex.abi, dexAddress);

            var newDeadline;
            var newPrice;
            var contractAddress;

            await retrieveDeadlineAndPrice();

            var eventDataNewOwner;

            await dexContract.getPastEvents('NewOwner', {
                filter: { _owner: newOwnerAddress },
                fromBlock: 0,
                toBlock: 'latest'
            }).then(function (events, error) {
                if (error) {
                    console.log(error);
                }
                else if (events.length === 1) {

                    eventDataNewOwner = events[events.length - 1];
                }
            });

            var sha256Regex = /^[a-f0-9]{64}$/gi;

            var message = eventDataNewOwner.returnValues["_message"];
            var orderNumber = eventDataNewOwner.returnValues["_counter"];
            var pricePaid = eventDataNewOwner.returnValues["_pricePaid"];
            var newOwner = ethjs.toChecksumAddress(eventDataNewOwner.returnValues["_owner"]);
            var messageIsHashed = sha256Regex.test(message);
            var messageIsHashedValue = 0;
            if (messageIsHashed) {
                messageIsHashedValue = 1;
            }
            var blockData = await web3.eth.getBlock(receipt.blockNumber);
            var blockTimestamp = blockData.timestamp;
            if (newOwner == newOwnerAddress) {
                console.log("Price paid: "+pricePaid);
                const sqlUpdate = "UPDATE auctions SET auctionDeadline = ?, auctionPrice = ? WHERE dexAddress = ?; INSERT INTO auctionbuyers (auctionAddress, buyerAddress, orderNumber, pricePaid, message, hashed, timestamp) VALUES (?,?,?,?,?,?,?);";

                db.query(sqlUpdate, [newDeadline, newPrice, dexAddress, contractAddress, newOwner, orderNumber, pricePaid, message, messageIsHashedValue, blockTimestamp], (err, result) => {
                    if (!err) {
                        res.send(result);
                    } else {
                        res.send(err);
                    }
                });
            }

        } else {
            const sqlUpdate = "UPDATE auctions SET auctionClosed = ? WHERE dexAddress = ?;";

            db.query(sqlUpdate, [1, dexAddress], (err, result) => {
                if (!err) {
                    res.send(result);
                } else {
                    res.send(err);
                }
            });
        }

        async function setReceipt() {
            receipt = await web3.eth.getTransactionReceipt(txHash);
            console.log(receipt);

        }

        async function isContractValid() {

            //console.log(receiptl.contractAddress);
            var bytecode = await web3.eth.getCode(dexAddress);     //web3.eth.getCode gibt eindeutig den Bytecode zurück abgesehen von Parametern, unterscheidet sich zwar vom deployment bytecode aber egal
            validContract = (bytecode == validByteCode); //both deployed bytecode
        }

        async function retrieveDeadlineAndPrice() {
            newDeadline = await dexContract.methods.getDeadlineRemaining().call();
            newPrice = await dexContract.methods.getPreis().call();
            contractAddress = await dexContract.methods.getRichCoin().call();

        }
    }




    //res.send(userAddress);
});

router.post('/:txHash', function (req, res, next) { //In Body?

    const toBase64 = file => new Promise((resolve, reject) => {
        var bitmap = fs.readFileSync(file);
        return Buffer.from(bitmap, "base64");
    });

    execute();

    async function execute() {
        var metadata = JSON.parse(req.body.metadata);
        console.log(metadata);
        var encodedImage = req.body.file;
        var txHash = req.params.txHash;
        var receipt = await web3.eth.getTransactionReceipt(txHash);
        var eventDataContractCreated;
        var eventDataNewOwner;


        //Bild noch validieren?
        //Kommentare aus Blochchain-Code, sonst in Abi

        var contractAddress = receipt.contractAddress;
        var richCoinContract = new web3.eth.Contract(RichCoin.abi, contractAddress);
        var dexAddress = await richCoinContract.methods.getDexAddress().call();
        var dexContract = new web3.eth.Contract(Dex.abi, dexAddress);
        //console.log("Receipt: " + receipt);
        var validContract;
        await isContractValid();

        if (validContract) {
            //ContractData from event


            //string ___name, string ___symbol, uint256 _auctionStart, uint256 _deadlineLength, uint256 _startPrice, uint256 _basis, string __tokenURI
            var creatorAddressTx = ethjs.toChecksumAddress(receipt.from);

            await retrieveEventData();

            var auctionName = eventDataContractCreated.returnValues["___name"];
            var auctionSymbol = eventDataContractCreated.returnValues["___symbol"];
            var auctionAuctionStart = parseInt(eventDataContractCreated.returnValues["_auctionStart"]);
            var auctionDeadlineLength = parseInt(eventDataContractCreated.returnValues["_deadlineLength"]);
            var auctionStartPrice = parseInt(eventDataContractCreated.returnValues["_startPrice"]);
            var auctionPriceIncrease = parseInt(eventDataContractCreated.returnValues["_basis"]);
            var auctionUri = eventDataContractCreated.returnValues["__tokenURI"];

            var sha256Regex = /^[a-f0-9]{64}$/gi;

            var message = eventDataNewOwner.returnValues["_message"];
            var orderNumber = eventDataNewOwner.returnValues["_counter"];
            var pricePaid = eventDataNewOwner.returnValues["_pricePaid"];
            var firstOwner = ethjs.toChecksumAddress(eventDataNewOwner.returnValues["_owner"]);
            var messageIsHashed = sha256Regex.test(message);
            var messageIsHashedValue = 0;
            if (messageIsHashed) {
                messageIsHashedValue = 1;
            }
            console.log(receipt.blockNumber);
            var blockData = await web3.eth.getBlock(receipt.blockNumber);
            console.log(receipt.blockData);
            var blockTimestamp = blockData.timestamp;


            var metadataCreatorAddress = metadata.properties.attributes[4].value;
            var metadataName = metadata.properties.name.description;
            var metadataSymbol = metadata.properties.symbol.description;
            var metadataAuctionStart = parseInt(metadata.properties.attributes[0].value);
            var metadataDeadlineLength = parseInt(metadata.properties.attributes[1].value);
            var metadataStartPrice = parseInt(metadata.properties.attributes[2].value);
            var metadataPriceIncrease = parseInt(metadata.properties.attributes[3].value);
            var metadataDescription = metadata.properties.description.description;
            var metadataImageUri = (metadata.properties.image.description).replace("ipfs://", "");



            if (firstOwner === creatorAddressTx && metadataCreatorAddress === creatorAddressTx && auctionName === metadataName && auctionSymbol === metadataSymbol && auctionAuctionStart === metadataAuctionStart && auctionDeadlineLength === metadataDeadlineLength && auctionStartPrice === metadataStartPrice && auctionPriceIncrease === metadataPriceIncrease) {
                var intAuctionStartPrice = parseInt(auctionStartPrice);
                var intAuctionPriceIncrease = parseInt(auctionPriceIncrease);
                var nextPrice = Math.trunc((intAuctionStartPrice * intAuctionPriceIncrease) / 100);
                if (!(nextPrice <= intAuctionStartPrice)) {
                    var base64Regex = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/;
                    var encodedImageNoPrefix = encodedImage.replace(/^data:image\/[a-z]+;base64,/, "");
                    if (['image/jpeg', 'image/png', 'image/gif'].includes(encodedImage.split(":")[1].split(";")[0]) && encodedImageNoPrefix.match(base64Regex) && 4 * Math.ceil((encodedImageNoPrefix.length / 3)) * 0.5624896334383812 <= 3e6) {
                        var file = Buffer.from(encodedImageNoPrefix, 'base64');

                        var formData = new FormData();

                        formData.append("file", file, contractAddress + "_image");
                        var metadataUploadable = { pinataMetadata: { name: contractAddress + "_metadata" }, pinataContent: metadata };
                        console.log("formData");
                        console.log(formData);
                        var uploadedImage = await axios.post("https://api.pinata.cloud/pinning/pinFileToIPFS", formData,
                            {
                                maxContentLength: 'Infinity',
                                maxBodyLength: 'Infinity',
                                headers: {
                                    'pinata_api_key': "58492dd91d3b48ffa0e1",
                                    'pinata_secret_api_key': "d0da3422a9d146fb05394694bb89b68219648f6b5dc45dbcdfd87e706839e736"
                                }
                            })
                        if (uploadedImage.data.IpfsHash == metadataImageUri) {
                            var uploadedMetadata = await axios.post("https://api.pinata.cloud/pinning/pinJSONToIPFS", metadataUploadable,
                                {
                                    maxContentLength: 'Infinity',
                                    maxBodyLength: 'Infinity',
                                    headers: {
                                        'pinata_api_key': "58492dd91d3b48ffa0e1",
                                        'pinata_secret_api_key': "d0da3422a9d146fb05394694bb89b68219648f6b5dc45dbcdfd87e706839e736"
                                    }

                                })
                            if (uploadedMetadata.data.IpfsHash == auctionUri) {
                                var auctionPrice = auctionStartPrice * auctionPriceIncrease / 100;
                                var auctionDeadline = auctionAuctionStart + auctionDeadlineLength;
                                console.log([contractAddress, creatorAddressTx, auctionName, auctionSymbol, auctionAuctionStart, auctionStartPrice, auctionDeadlineLength, auctionPriceIncrease, auctionUri, metadataImageUri, metadataDescription, auctionDeadline, auctionPrice, 0, dexAddress, encodedImageNoPrefix, contractAddress, firstOwner, orderNumber, pricePaid, message, messageIsHashedValue, blockTimestamp]);
                                const sqlInsert = "INSERT INTO auctions (nftAddress, creatorAddress, auctionName, auctionSymbol, auctionStart, auctionStartPrice, auctionDeadlineLength, auctionPriceIncrease, nftMetadataUri, nftImageUri, auctionDescription, auctionDeadline, auctionPrice, auctionClosed, dexAddress, nftImage) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, FROM_BASE64(?)); INSERT INTO auctionbuyers (auctionAddress, buyerAddress, orderNumber, pricePaid, message, hashed, timestamp) VALUES (?,?,?,?,?,?,?);";
                                db.query(sqlInsert, [contractAddress, creatorAddressTx, auctionName, auctionSymbol, auctionAuctionStart, auctionStartPrice, auctionDeadlineLength, auctionPriceIncrease, auctionUri, metadataImageUri, metadataDescription, auctionDeadline, auctionPrice, 0, dexAddress, encodedImageNoPrefix, contractAddress, firstOwner, orderNumber, pricePaid, message, messageIsHashedValue, blockTimestamp], (err, result) => {
                                    if (err) {
                                        res.send(err);
                                    } else {
                                        res.send(result);
                                    }
                                });
                            }
                        } else {
                            axios.delete("https://api.pinata.cloud/pinning/unpin/" + auctionUri, {
                                headers: {
                                    'pinata_api_key': "58492dd91d3b48ffa0e1",
                                    'pinata_secret_api_key': "d0da3422a9d146fb05394694bb89b68219648f6b5dc45dbcdfd87e706839e736"
                                }
                            }).then((response) => {
                                console.log(response);
                            }).catch((error) => {
                                console.log(error);
                            });
                            axios.delete("https://api.pinata.cloud/pinning/unpin/" + metadataImageUri, {
                                headers: {
                                    'pinata_api_key': "58492dd91d3b48ffa0e1",
                                    'pinata_secret_api_key': "d0da3422a9d146fb05394694bb89b68219648f6b5dc45dbcdfd87e706839e736"
                                }
                            }).then((response) => {
                                console.log(response);
                            }).catch((error) => {
                                console.log(error);
                            });
                        }
                    } else {
                        axios.delete("https://api.pinata.cloud/pinning/unpin/" + metadataImageUri, {
                            headers: {
                                'pinata_api_key': "58492dd91d3b48ffa0e1",
                                'pinata_secret_api_key': "d0da3422a9d146fb05394694bb89b68219648f6b5dc45dbcdfd87e706839e736"
                            }
                        }).then((response) => {
                            console.log(response);
                        }).catch((error) => {
                            console.log(error);
                        });
                    }
                } else {
                    res.send("Invalid priceIncrease");

                }





            } else {
                res.send("Not equal");
            }

        } else {
            res.send("Contract not authorized");
        }


        async function isContractValid() {

            //console.log(receiptl.contractAddress);
            var bytecodeRichCoin = await web3.eth.getCode(contractAddress);     //web3.eth.getCode gibt eindeutig den Bytecode zurück abgesehen von Parametern, unterscheidet sich zwar vom deployment bytecode aber egal
            var bytecodeDex = await web3.eth.getCode(dexAddress);
            console.log("Dex: ");
            console.log(bytecodeDex);
            console.log("RichCoin: ");
            console.log(bytecodeRichCoin);
            console.log(bytecodeRichCoin == validByteCodeRichCoin);
            console.log(bytecodeDex == validByteCodeDex);
            validContract = (bytecodeRichCoin == validByteCodeRichCoin && bytecodeDex == validByteCodeDex); //both deployed bytecode
        }

        async function retrieveEventData() {
            await richCoinContract.getPastEvents('ContractCreated', {
                filter: {},
                fromBlock: 0,
                toBlock: 'latest'
            }).then(function (events, error) {
                if (error) {
                    console.log(error);
                }
                else if (events.length === 1) {

                    eventDataContractCreated = events[events.length - 1];
                }
            });
            console.log(creatorAddressTx);
            await dexContract.getPastEvents('NewOwner', {
                filter: { _owner: creatorAddressTx },
                fromBlock: 0,
                toBlock: 'latest'
            }).then(function (events, error) {
                if (error) {
                    console.log(error);
                }
                else if (events.length === 1) {

                    eventDataNewOwner = events[events.length - 1];
                }
            });

            //console.log(uri);
        }


    }






});

module.exports = router;